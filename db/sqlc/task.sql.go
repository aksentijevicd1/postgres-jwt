// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: task.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
	name
) VALUES (
    $1
) 
RETURNING id, name, created_at
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, name)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const createStatus = `-- name: CreateStatus :one
INSERT INTO statuses (
	name
) VALUES (
    $1
) 
RETURNING id, name, created_at
`

func (q *Queries) CreateStatus(ctx context.Context, name string) (Status, error) {
	row := q.db.QueryRowContext(ctx, createStatus, name)
	var i Status
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
title,
illustration,
category_id,
status_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, title, illustration, category_id, status_id, created_at
`

type CreateTaskParams struct {
	Title        string `json:"title"`
	Illustration string `json:"illustration"`
	CategoryID   int64  `json:"category_id"`
	StatusID     int64  `json:"status_id"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Title,
		arg.Illustration,
		arg.CategoryID,
		arg.StatusID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Illustration,
		&i.CategoryID,
		&i.StatusID,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
firstname,
lastname,
password,
email,
phone,
token,
user_type_id,
refresh_token
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, firstname, lastname, password, email, phone, token, user_type_id, refresh_token, created_at, updated_at
`

type CreateUserParams struct {
	Firstname    string `json:"firstname"`
	Lastname     string `json:"lastname"`
	Password     string `json:"password"`
	Email        string `json:"email"`
	Phone        string `json:"phone"`
	Token        string `json:"token"`
	UserTypeID   int64  `json:"user_type_id"`
	RefreshToken string `json:"refresh_token"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Firstname,
		arg.Lastname,
		arg.Password,
		arg.Email,
		arg.Phone,
		arg.Token,
		arg.UserTypeID,
		arg.RefreshToken,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.Token,
		&i.UserTypeID,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const deleteStatus = `-- name: DeleteStatus :exec
DELETE FROM statuses WHERE id = $1
`

func (q *Queries) DeleteStatus(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStatus, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, created_at FROM categories
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getStatus = `-- name: GetStatus :one
SELECT id, name, created_at FROM statuses
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStatus(ctx context.Context, id int64) (Status, error) {
	row := q.db.QueryRowContext(ctx, getStatus, id)
	var i Status
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT id, title, illustration, category_id, status_id, created_at FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Illustration,
		&i.CategoryID,
		&i.StatusID,
		&i.CreatedAt,
	)
	return i, err
}

const getTaskForUpdate = `-- name: GetTaskForUpdate :one
SELECT id, title, illustration, category_id, status_id, created_at FROM tasks
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetTaskForUpdate(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskForUpdate, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Illustration,
		&i.CategoryID,
		&i.StatusID,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, firstname, lastname, password, email, phone, token, user_type_id, refresh_token, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.Token,
		&i.UserTypeID,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, name, created_at FROM categories
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEntriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStatuses = `-- name: ListStatuses :many
SELECT id, name, created_at FROM statuses
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListStatusesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStatuses(ctx context.Context, arg ListStatusesParams) ([]Status, error) {
	rows, err := q.db.QueryContext(ctx, listStatuses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Status{}
	for rows.Next() {
		var i Status
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, illustration, category_id, status_id, created_at FROM tasks
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTasksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Illustration,
			&i.CategoryID,
			&i.StatusID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, firstname, lastname, password, email, phone, token, user_type_id, refresh_token, created_at, updated_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Password,
			&i.Email,
			&i.Phone,
			&i.Token,
			&i.UserTypeID,
			&i.RefreshToken,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks SET title = $2, illustration = $3, category_id = $4, status_id = $5  WHERE id = $1 RETURNING id, title, illustration, category_id, status_id, created_at
`

type UpdateTaskParams struct {
	ID           int64  `json:"id"`
	Title        string `json:"title"`
	Illustration string `json:"illustration"`
	CategoryID   int64  `json:"category_id"`
	StatusID     int64  `json:"status_id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.ID,
		arg.Title,
		arg.Illustration,
		arg.CategoryID,
		arg.StatusID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Illustration,
		&i.CategoryID,
		&i.StatusID,
		&i.CreatedAt,
	)
	return i, err
}
